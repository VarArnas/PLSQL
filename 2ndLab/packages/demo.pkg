---------------------DEMO PACKAGE------------------------------

CREATE OR REPLACE PACKAGE demo_pkg AS
  PROCEDURE run_search_efficiency_demo(i_input IN input_pkg.g_number_read_t);
END demo_pkg;
/

CREATE OR REPLACE PACKAGE BODY demo_pkg 
IS
  PROCEDURE run_search_efficiency_demo(i_input IN input_pkg.g_number_read_t) 
  IS
    l_n PLS_INTEGER;
    l_random_array global_types_consts_pkg.g_random_number_nt;
    l_random_sorted_array global_types_consts_pkg.g_random_number_nt;
    l_search_efficiencies global_types_consts_pkg.g_average_search_aat;
    l_search_options global_types_consts_pkg.g_search_option_aat := global_types_consts_pkg.g_search_option_aat('binary' => 1, 'linear' => 2);

    -- invalid data for exception testing
    temp global_types_consts_pkg.g_random_number_nt := global_types_consts_pkg.g_random_number_nt();
    temp1 global_types_consts_pkg.g_random_number_nt;
    temp2 global_types_consts_pkg.g_search_option_aat := global_types_consts_pkg.g_search_option_aat('asdawdas' => 1, 'linear' => 2);
    temp3 global_types_consts_pkg.g_search_option_aat := global_types_consts_pkg.g_search_option_aat('linear' => 1);
    temp4 PLS_INTEGER := 0;
  BEGIN
    l_n := input_pkg.handle_input(i_input);

    l_random_array := array_management_pkg.random_unique_nt_generation(l_n);

    l_random_sorted_array := array_management_pkg.insertion_sort(l_random_array);

    l_search_efficiencies := search_pkg.get_search_efficiencies(
      i_unordered_array => l_random_array,
      i_ordered_array => l_random_sorted_array,
      i_searches => l_search_options
    );

    array_management_pkg.print_number_array(l_random_array, 'Unsorted array: ');
    array_management_pkg.print_number_array(l_random_sorted_array, 'Sorted array: ');

    <<check_if_all_search_options_got_created>>
    DECLARE
        l_iterator global_types_consts_pkg.g_search_option_t := global_types_consts_pkg.c_existing_searches.FIRST;
    BEGIN
        WHILE l_iterator IS NOT NULL
        LOOP
            IF NOT l_search_efficiencies.EXISTS(l_iterator) THEN
                RAISE NO_DATA_FOUND;
            END IF;
            l_iterator := global_types_consts_pkg.c_existing_searches.NEXT(l_iterator);
        END LOOP;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            exception_pkg.handle_exception(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, SQLCODE, USER, SYSDATE);

            <<add_non_existent_search_efficiencies>>
            DECLARE
                l_iterator global_types_consts_pkg.g_search_option_t := global_types_consts_pkg.c_existing_searches.FIRST;
                c_default_search_efficiency PLS_INTEGER := 0;
            BEGIN
                WHILE l_iterator IS NOT NULL
                LOOP
                    IF NOT l_search_efficiencies.EXISTS(l_iterator) THEN
                        l_search_efficiencies(l_iterator) := c_default_search_efficiency;
                    END IF;
                    l_iterator := global_types_consts_pkg.c_existing_searches.NEXT(l_iterator);
                END LOOP;
            END add_non_existent_search_efficiencies;
        WHEN OTHERS THEN
            RAISE;
    END check_if_all_search_options_got_created;

    <<print_all_search_results>>
    DECLARE
        l_iterator global_types_consts_pkg.g_search_option_t  := global_types_consts_pkg.c_existing_searches.FIRST;
    BEGIN
        WHILE l_iterator IS NOT NULL
        LOOP
            DBMS_OUTPUT.PUT_LINE(chr(10) || l_iterator || ' average: ' || l_search_efficiencies(l_iterator) || chr(10));
            l_iterator := global_types_consts_pkg.c_existing_searches.NEXT(l_iterator);
        END LOOP;
    END print_all_search_results;
  END run_search_efficiency_demo;
END demo_pkg;
/